cmake_minimum_required(VERSION 3.5)
project(px2)

# Default to C++14
if(NOT CMAKE_CXX_STANDARD)
  set(CMAKE_CXX_STANDARD 14)
endif()

if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  add_compile_options(-Wall -Wextra -Wpedantic)
endif()

# Find dependencies (ROS 2)
find_package(ament_cmake REQUIRED)
find_package(rclcpp REQUIRED)
find_package(std_msgs REQUIRED)

# OpenCV
find_package(OpenCV REQUIRED)


# ONNX Runtime
find_path(ONNX_RUNTIME_SESSION_INCLUDE_DIRS onnxruntime_cxx_api.h HINTS /usr/local/include/onnxruntime/core/session/)
find_library(ONNX_RUNTIME_LIB onnxruntime HINTS /usr/local/include/onnxruntime)

# **Include Directories**
include_directories(
  ${CMAKE_SOURCE_DIR}/include  
)

# Project ==> Node
add_executable(${PROJECT_NAME} 
  src/inference.cpp 
  src/midas_inference.cpp 
  src/yolo_inference.cpp
)

# Ensure dependencies are linked correctly
target_include_directories(${PROJECT_NAME} PRIVATE 
  ${CMAKE_SOURCE_DIR}/include
  ${ONNX_RUNTIME_SESSION_INCLUDE_DIRS}
  ${OpenCV_INCLUDE_DIRS}
)

target_link_libraries(${PROJECT_NAME} 
  ${ONNX_RUNTIME_LIB} 
  ${OpenCV_LIBS}
)

ament_target_dependencies(${PROJECT_NAME} rclcpp std_msgs)

# Install targets
install(TARGETS
  ${PROJECT_NAME}
  DESTINATION lib/${PROJECT_NAME})

ament_package()

